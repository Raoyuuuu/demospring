<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    <!-- 外部配置文件 -->
    <context:property-placeholder location="classpath*:application.properties"/>
    <!-- 组件扫描 -->
    <!-- 表明ccom.demo包及其子包中，如果某个类的头上带有特定的注解 @Component，@Repository，@Service，@Controller，就会将这个对象作为Bean注册进Spring容器-->
    <context:component-scan base-package="com.demo.*"/>

    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${druid.url}" />
        <property name="driverClassName" value="${druid.driverClassName}" />
        <property name="username" value="${druid.username}" />
        <property name="password" value="${druid.password}" />

        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最少空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunMillis}" />
        <!-- 一个连接在池中最小的生存时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!--打开PSCache，并且指定每个连接上PSCache的大小，如果用Oracle，则把poolPrepareStatement配置为true，mysql可以配置为false-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatement}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>

        <!--配置监控统计拦截的filters-->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis.xml" />
        <property name="mapperLocations" value="classpath*:mapper/*.xml" />
        <property name="typeAliasesPackage" value="com.demo.model" />
    </bean>

    <!--配置mybaits mapper接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.demo.mapper" />
        <!--一般无需设置，除非配置了多个dataSource，可以使用进行指定-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--用于过滤被扫描的接口，如果设置了该属性，那么MyBatis的接口只有包含该属性才会被扫描进去-->
<!--        <property name="annotationClass" value="com.demo.mapper.UserMapper"/>-->
    </bean>
</beans>